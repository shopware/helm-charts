name: Check pull request

on:
  pull_request:

permissions:
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  pull-requests: read
  # Optional: allow write access to checks to allow the action to annotate code in the PR.
  checks: write

jobs:
  CheckVersionUpdate:
    runs-on: runs-on=${{ github.run_id }}/runner=sw-amd64/cpu=1
    container: "ghcr.io/shopware-redstone/k8s-tooling-image:latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: |
          git config --global --add safe.directory '*'
          git branch --track main origin/main
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            chart:
              - 'charts/shopware/**/*.yaml'
              - 'charts/shopware/**/*.yml'
              - 'charts/shopware/**/*.tpl'
              - 'charts/shopware/Chart.lock'
      - name: Check if version is updated with each pr
        if: steps.filter.outputs.chart == 'true'
        run: |
          oldAppVersion=$(git show main:charts/shopware/Chart.yaml | yq ".appVersion")
          oldVersion=$(git show main:charts/shopware/Chart.yaml | yq ".version")
          currentAppVersion=$(cat charts/shopware/Chart.yaml | yq ".appVersion")
          currentVersion=$(cat charts/shopware/Chart.yaml | yq ".version")
          if [ "$oldAppVersion" == "$currentAppVersion" ]; then
            echo "::error::Failing, reason: AppVersion is not updated. Current $currentAppVersion, old $oldAppVersion"
            exit 10
          fi
          if [ "$oldVersion" == "$currentVersion" ]; then
            echo "::error::Failing, reason: Version is not updated. Current $currentVersion, old $oldVersion"
            exit 11
          fi

  helm-lint:
    name: helm lint
    runs-on: runs-on=${{ github.run_id }}/runner=sw-amd64/cpu=1
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.16.4
      - name: helm lint
        run: |
          helm lint charts/shopware

  test-on-cluster:
    name: Cluster E2E Test
    runs-on: runs-on=${{ github.run_id }}/runner=sw-amd64/cpu=8
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.16.4

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1

      - name: Run chart-testing (install)
        run: |
          kubectl apply -k "github.com/minio/operator?ref=v5.0.15"
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/baremetal/deploy.yaml
          kubectl create namespace test
          kubectl rollout status --namespace ingress-nginx deployment/ingress-nginx-controller --timeout=60s

          helm repo add percona https://percona.github.io/percona-helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add prometheus https://prometheus-community.github.io/helm-charts
          helm repo add shopware https://shopware.github.io/helm-charts
          helm repo add opentelemetry https://open-telemetry.github.io/opentelemetry-helm-charts
          helm dependency build charts/shopware

          helm template op charts/shopware-operator --namespace test | kubectl apply --server-side -f -
          helm install test --namespace test charts/shopware \
            --set minio.storageSize=100Mi \
            --set minio.resources.requests.cpu=100m \
            --set valkeyapp.master.resources.requests.cpu=200m \
            --set valkeysession.master.resources.requests.cpu=200m \
            --set valkeyworker.master.resources.requests.cpu=200m

          kubectl wait --namespace test --for=condition=Available --timeout=60s deployment/op-shopware-operator || {
            kubectl get deployment/shopware-operator --namespace test -o json && exit 2
          }
          kubectl wait --namespace test --for=condition=Ready --timeout=2m pods/test-pxc-0 || {
            kubectl get pods/test-pxc-0 --namespace test -o json && exit 22
          }
          kubectl wait --namespace test store/test --for='jsonpath={.status.state}'=setup --timeout=2m || {
            kubectl get deployment/shopware-operator --namespace test -o json && exit 23
          }

          kubectl wait --namespace test tenant/test-minio --for='jsonpath={.status.currentState}'=Initialized --timeout=1m || {
            kubectl get tenant/test-minio --namespace test -o json; \
            kubectl get pod/test-minio-pool-0-0 --namespace test -o json && exit 3
          }

          sleep 10

          kubectl wait --namespace test jobs/test-setup --timeout=8m --for=condition=complete || {
            kubectl get job/test-setup --namespace test -o json; \
            kubectl get job --namespace test -o wide; \
            kubectl get pods --namespace test -o wide; \
            LATEST_POD=$(kubectl get pods --sort-by=.metadata.creationTimestamp -n test -o jsonpath='{.items[-1].metadata.name}')
            kubectl logs $LATEST_POD -n test && exit 4
          }

          kubectl wait --namespace test store/test --for='jsonpath={.status.state}'=ready --timeout=1m || {
            kubectl get store/test --namespace test -o json && exit 5
          }

          kubectl get pods --namespace test -o wide
