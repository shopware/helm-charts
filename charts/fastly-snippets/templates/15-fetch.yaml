apiVersion: fastly.shopware.com/v1
kind: FastlySnippet
metadata:
  name: 15-fetch
spec:
  content: |
    # --- START: LOGGING ---
    set beresp.http.log-origin:status = beresp.status;
    set beresp.http.log-origin:cache-control = beresp.http.Cache-Control;
    # --- END: LOGGING ---
    #
    # --- START: ENABLE COMPRESSION (CDN) ---
    if ((beresp.status == 200 || beresp.status == 404) && (beresp.http.content-type ~ "^(text\/html|application\/x\-javascript|text\/css|application\/javascript|text\/javascript|application\/json|application\/vnd\.ms\-fontobject|application\/x\-font\-opentype|application\/x\-font\-truetype|application\/x\-font\-ttf|application\/xml|font\/eot|font\/opentype|font\/otf|image\/svg\+xml|image\/vnd\.microsoft\.icon|text\/plain|text\/xml)\s*($|;)" || req.url ~ "\.(css|js|html|eot|ico|otf|ttf|json|svg)($|\?)" ) ) {

      # Always set a Vary header, even if we don't end up compressing
      # the object, because the uncompressed version should only be
      # used when the request does NOT request the compressed one.
      if (!beresp.http.Vary ~ "Accept-Encoding") {
        if (beresp.http.Vary) {
          set beresp.http.Vary = beresp.http.Vary ", Accept-Encoding";
        } else {
          set beresp.http.Vary = "Accept-Encoding";
        }
      }

      set req.http.Accept-Encoding = accept.encoding_lookup(
        "br:compress:deflate:gzip",
        "identity",
        if (
          req.http.Fastly-Orig-Accept-Encoding,
          req.http.Fastly-Orig-Accept-Encoding,
          req.http.Accept-Encoding
        )
      );

      if (req.http.Accept-Encoding == "br") {
        set beresp.brotli = true;
      } elseif (req.http.Accept-Encoding == "gzip") {
        set beresp.gzip = true;
      }
    }
    # --- END: ENABLE COMPRESSION (CDN) ---

    # --- START: REMOVE AWS HEADERS (CDN) ---
    unset beresp.http.x-amz-id-2;
    unset beresp.http.x-amz-request-id;
    unset beresp.http.x-amz-delete-marker;
    unset beresp.http.x-amz-version-id;
    unset beresp.http.x-amz-server-side-encryption;
    unset beresp.http.x-amz-server-side-encryption-aws-kms-key-id;
    unset beresp.http.x-amz-replication-status;
    # --- END: REMOVE AWS HEADERS (CDN) ---


    # --- START: SHOPWARE ---
    # Pass immediately if x-pass is present
    if (req.http.x-pass) {
      return (pass);
    }

    # remove set cookie headers to make responses cachable
    if (beresp.http.cache-control ~ "public") {
      unset beresp.http.set-cookie;
    }

    if (beresp.http.Cache-Control ~ "private|no-cache|no-store") {
      set req.http.Fastly-Cachetype = "PRIVATE";
      return (pass);
    }

    # If the object is coming with no Expires, Surrogate-Control or Cache-Control headers we assume it's a misconfiguration
    # and should not cache it. This is to prevent inadventently caching private data
    if (!beresp.http.Expires && !beresp.http.Surrogate-Control ~ "max-age" && !beresp.http.Cache-Control ~ "(s-maxage|max-age)") {
      # Varnish sets default TTL if none of the headers above are present. If not set we want to make sure we don't cache it
      set beresp.ttl = 3600s;
      return(pass);
    }
    # --- END: SHOPWARE ---
