apiVersion: shop.shopware.com/v1
kind: Store
metadata:
  name: '{{ .Release.Name }}'
  namespace: '{{ .Release.Namespace }}'
spec:
  disableJobDeletion: {{ .Values.store.disableJobDeletion | default false }}
  disableChecks: {{ .Values.store.disableChecks | default false }}
  {{- if .Values.minio.enabled }}
  cdnURL: 'https://{{ template "generateS3URLApi" . }}/shopware-public'
  {{- else }}
  cdnURL: {{ .Values.store.cdnURL }}
  {{- end }}
  s3Storage:
    {{- include "getStoreS3" . | nindent 4 -}}

  {{- if .Values.store.serviceAccountName }}
  serviceAccountName: {{ .Values.store.serviceAccountName }}
  {{- end }}

  {{- if hasKey .Values "blackfire" }}
  {{- if hasKey .Values.blackfire "serverID" }}
  {{- if hasKey .Values.blackfire "serverToken" }}
  blackfire:
    enabled: true
    host: {{ template "getBlackfireServiceName" . }}
    port: {{ .Values.blackfire.port | default 8307 }}
  {{- end }}
  {{- end }}
  {{- end }}

  sessionCache:
    {{- if or .Values.valkeysession.enabled .Values.redissession.enabled}}
    adapter: redis
    redisHost: {{ template "getSessionCacheMasterService" . }}
    {{- else }}
    adapter: builtin
    {{- end }}

  appCache:
    {{- if or .Values.valkeyapp.enabled .Values.redisapp.enabled }}
    adapter: redis
    redisHost: {{ template "getAppCacheMasterService" . }}
    {{- else }}
    adapter: builtin
    {{- end }}

  worker:
    {{- if or .Values.valkeyworker.enabled .Values.redisworker.enabled}}
    adapter: redis
    redisHost: {{ template "getWorkerMasterService" . }}
    {{- else }}
    adapter: builtin
    {{- end }}

  {{- if hasKey .Values.store "otel" }}
  {{- if hasKey .Values.store.otel "exporterEndpoint" }}
  otel:
    enabled: true
    exporterEndpoint: {{ .Values.store.otel.exporterEndpoint }}
  {{- end }}
  {{- end }}

  {{- if hasKey .Values.store "shopConfiguration" }}
  shopConfiguration:
    currency: {{ .Values.store.shopConfiguration.currency | default "EUR" }}
    locale: {{ .Values.store.shopConfiguration.locale | default "en-GB" }}
  {{- end }}

  fpm:
    {{- if hasKey .Values.store "fpm" }}
    processManagement: {{ .Values.store.fpm.processManagement | default "dynamic" }}
    # TODO: This is not working anymore. We can't use tcp here. It's much slower.
    # listen: {{ .Values.store.fpm.listen | default "unix//tmp/php-fpm.sock" }}
    # scrapeURI: {{ .Values.store.fpm.scrapeURI | default "tcp://127.0.0.1:9000/status" }}
    # statusPath: {{ .Values.store.fpm.statusPath | default "/status" }}
    # maxChildren: {{ .Values.store.fpm.maxChildren | default 8 }}
    # startServers: {{ .Values.store.fpm.startServers | default 8 }}
    # minSpareServers: {{ .Values.store.fpm.minSpareServers | default 4 }}
    # maxSpareServers: {{ .Values.store.fpm.maxSpareServers | default 8 }}
    {{- else }}
    processManagement: "dynamic"
    {{- end }}

  horizontalPodAutoscaler:
    {{- with .Values.store.horizontalPodAutoscaler }}
      {{- toYaml . | nindent 4 }}
    {{- end }}

  {{- if hasKey .Values.store "setupScript" }}
  setupScript: {{ .Values.store.setupScript | toYaml | indent 2 }}
  {{- end }}
  {{- if hasKey .Values.store "migrationScript" }}
  migrationScript: {{ .Values.store.migrationScript | toYaml | indent 2 }}
  {{- end }}

  {{- if hasKey .Values.store "adminCredentials" }}
  adminCredentials:
    username: {{ .Values.store.adminCredentials.username | default "admin" }}
    password: {{ .Values.store.adminCredentials.password | default "" }}
  {{- end }}

  {{- if hasKey .Values.store "opensearch" }}
  opensearch:
    enabled: {{ .Values.store.opensearch.enabled | default false }}
    {{- if .Values.store.opensearch.host }}
    host: {{ .Values.store.opensearch.host }}
    {{- end }}
    {{- if .Values.store.opensearch.port }}
    port: {{ .Values.store.opensearch.port }}
    {{- end }}
    {{- if .Values.store.opensearch.username }}
    username: {{ .Values.store.opensearch.username }}
    {{- end }}
    {{- if .Values.store.opensearch.passwordSecretRef }}
    passwordSecretRef:
      {{- with .Values.store.opensearch.passwordSecretRef }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
    {{- end }}
    {{- if .Values.store.opensearch.schema }}
    schema: {{ .Values.store.opensearch.schema }}
    {{- end }}
    {{- if .Values.store.opensearch.index }}
    index:
      {{- if .Values.store.opensearch.index.prefix }}
      prefix: {{ .Values.store.opensearch.index.prefix }}
      {{- end }}
      {{- if .Values.store.opensearch.index.replicas }}
      replicas: {{ .Values.store.opensearch.index.replicas }}
      {{- end }}
      {{- if .Values.store.opensearch.index.shards }}
      shards: {{ .Values.store.opensearch.index.shards }}
      {{- end }}
    {{- end }}
  {{- end }}

  database:
    {{- if .Values.percona.enabled }}
    host: {{ template "getPerconaDBHost" . }}
    passwordSecretRef:
      name: {{ template "getPerconaSecrets" . }}
      key: root
    {{- else if hasKey .Values.store.database "host" }}
    host: {{ .Values.store.database.host }}
    passwordSecretRef:
      {{- with .Values.store.database.passwordSecretRef }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
    {{- else if hasKey .Values.store.database "hostRef" }}
    hostRef:
      {{- with .Values.store.database.hostRef }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
    passwordSecretRef:
      {{- with .Values.store.database.passwordSecretRef }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
    {{- else }}
    {{- fail "value for .Values.store.database must have host or hostRef when percona is disabled" }}
    {{- end }}
    user: {{ .Values.store.database.user }}
    version: {{ .Values.store.database.version | default "8" | quote }}
    port: {{ .Values.store.database.port | default 3306 }}
    name: {{ .Values.store.database.name | default "shopware" }}
  network:
    host: {{ template "generateHost" . }}
    {{- if hasKey .Values.store "network" }}
    enabledIngress: {{ .Values.store.network.enabled | default false }}
    ingressClassName: {{ .Values.store.network.ingressClassName | default "" }}
    annotations:
      {{- with .Values.store.network.annotations }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
    {{- end }}
  container:
    image: {{ .Values.store.container.image }}
    replicas: {{ .Values.store.container.replicas | default 2 }}
    progressDeadlineSeconds: {{ .Values.store.container.progressDeadlineSeconds | default 30 }}
    imagePullPolicy: {{ .Values.store.container.imagePullPolicy | default "IfNotPresent" }}
    restartPolicy: {{ .Values.store.container.imagePullPolicy | default "Always" }}
    terminationGracePeriodSeconds: {{ .Values.store.container.terminationGracePeriodSeconds | default 30 }}
    volumeMounts:
      - mountPath: /etc/caddy
        name: {{ template "getCaddyConfigName" . }}
      {{- if hasKey .Values.store "monolog" }}
      - mountPath: /var/www/html/config/packages/monolog.yaml
        name: {{ template "getMonologConfigName" . }}
        subPath: monolog.yaml
      {{- end}}
      {{- if hasKey .Values.store "sidecarLogging" }}
      - mountPath: {{ .Values.store.sidecarLogging.logFolder | default "/var/log" }}
        name: logs
      {{- end}}

    imagePullSecrets:
      {{- with .Values.store.container.imagePullSecrets }}
        {{- toYaml . | nindent 8 }}
      {{- end }}

    topologySpreadConstraints:
      {{- with .Values.store.container.topologySpreadConstraints }}
        {{- toYaml . | nindent 8 }}
      {{- end }}

    nodeSelector:
      {{- with .Values.store.container.nodeSelector }}
        {{- toYaml . | nindent 8 }}
      {{- end }}

    affinity:
      {{- with .Values.store.container.affinity }}
          {{- toYaml . | nindent 8 }}
      {{- end }}

    labels:
      {{- with .Values.store.container.labels }}
          {{- toYaml . | nindent 8 }}
      {{- end }}

    annotations:
      {{- with .Values.store.container.annotations }}
          {{- toYaml . | nindent 8 }}
      {{- end }}

    extraContainers:
      {{- with .Values.store.container.extraContainers }}
          {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if hasKey .Values.store "sidecarLogging" }}
      - name: logging
        image:  "{{ .Values.store.sidecarLogging.image.repository }}:{{ .Values.store.sidecarLogging.image.tag }}"
        imagePullPolicy: {{ .Values.store.sidecarLogging.image.pullPolicy | default "IfNotPresent" }}
        command:
          - /fluent-bit/bin/fluent-bit
        args:
          - '--workdir=/fluent-bit/etc'
          - '--config=/fluent-bit/etc/conf/fluent-bit.conf'
        ports:
          - name: http
            containerPort: 2020
            protocol: TCP
          - name: metrics
            containerPort: 2021
            protocol: TCP
        resources: {}
        volumeMounts:
          - name: {{ template "getFluentBitName" . }}
            mountPath: /fluent-bit/etc/conf
          - name: logs
            mountPath: {{ .Values.store.sidecarLogging.logFolder | default "/var/log" }}
            readOnly: true
        livenessProbe:
          httpGet:
            path: /
            port: http
            scheme: HTTP
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: http
            scheme: HTTP
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      {{- end }}
      {{- if hasKey .Values.store "fpm" }}
      {{- if ne .Values.store.fpm.processManagement "dynamic" }}
      - name: php-fpm-exporter
        env:
        - name: PHP_FPM_SCRAPE_URI
          value: {{ .Values.store.fpm.scrapeURI | default "tcp://127.0.0.1:9000/status" }}
        image: hipages/php-fpm_exporter
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9253
          protocol: TCP
        resources:
          limits:
            cpu: 30m
            memory: 32Mi
          requests:
            cpu: 10m
            memory: 10Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      {{- end }}
      {{- end }}

    resources:
      {{- with .Values.store.container.resources }}
          {{- toYaml . | nindent 6 }}
      {{- end }}
    extraEnvs:
      {{- with .Values.store.container.extraEnvs }}
          {{- toYaml . | nindent 6 }}
      {{- end }}
    volumes:
      - configMap:
          defaultMode: 420
          name: {{ template "getCaddyConfigName" . }}
        name: {{ template "getCaddyConfigName" . }}
      {{- if hasKey .Values.store "monolog" }}
      - configMap:
          defaultMode: 420
          name: {{ template "getMonologConfigName" . }}
        name: {{ template "getMonologConfigName" . }}
      {{- end}}
      {{- if hasKey .Values.store "sidecarLogging" }}
      - name: logs
        emptyDir: {}
      - name: {{ template "getFluentBitName" . }}
        configMap:
          name: {{ template "getFluentBitName" . }}
          defaultMode: 420
      {{- end}}

  {{- with .Values.store.adminDeploymentContainer }}
  adminDeploymentContainer:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.store.workerDeploymentContainer }}
  workerDeploymentContainer:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.store.storefrontDeploymentContainer }}
  storefrontDeploymentContainer:
    {{- toYaml . | nindent 4 }}
  {{- end }}

  {{- with .Values.store.setupJobContainer }}
  setupJobContainer:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.store.migrationJobContainer }}
  migrationJobContainer:
    {{- toYaml . | nindent 4 }}
  {{- end }}
